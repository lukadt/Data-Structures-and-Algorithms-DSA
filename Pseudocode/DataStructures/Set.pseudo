-------------------------------------------------------------------------------------------------------------------------------------------------

/* an algorithm to perform a set union */

algorithm Union(set1 <Set>, set2 <Set>)
	Pre:		set1 and set2 are not null
	Post:		Union of the two sets is performed
	Returns:	The union of the two sets if the union contains at least one item, otherwise null the set is empty
	union <- Set
	// loop through each set adding their items to the union set
	foreach item in set1
		union.Add(item)
	end foreach
	foreach item in set2
		union.Add(item)
	end foreach
	// return null if the union set is empty
	if union.Count < 1
		return null
	end if
	return union
end Union

-------------------------------------------------------------------------------------------------------------------------------------------------

/* an algorithm to perform a set intersection */

algorithm Intersection(set1 <Set>, set2 <Set>)
	Pre:		set1 and set2 are not null
	Post:		Intersection of the two sets is performed
	Returns:	The intersected set of the two sets if the intersected set contains at least one item otherwise null the set is empty
	intersection <- Set
	// loop through each item in set1 and check whether this item is in set2
	foreach item in set1
		if set2.Contains(item)
			// set1 and set2 both contain this item so add it to the intersection set
			intersection.Add(item)
		end if
	end foreach
	// return null if the intersection set is empty
	if intersection.Count < 1 
		return null
	end if
	return intersection
end Intersection