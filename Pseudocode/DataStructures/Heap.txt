/*****************************************************************************
* Max Heapify
* 
* Max heapifies a Heap so that the value of each parent key is >= to that of 
* its children :. the key at the root of the Heap is the largest in the Heap.
*****************************************************************************/

algorithm MaxHeapify()
	Pre:	index is a pointer to the next index in an array used to store the
			Heap items
	Post:	The Heap has been max heapified
	i <- index - 1
	parent <- (i - 1) / 2
	while (k > 0 && heap[k] > heap[parent])
		swap(heap[k], heap[parent])
		k <- parent
	end while
end MaxHeapify

/*****************************************************************************
* Remove
* 
* Removes an item from the heap preserviing heap order (min heap)
*****************************************************************************

algorithm Remove(value <int>)
	Pre:		value is value to remove from the heap
				left and right are alias' in the loop for 2*index+1 and 2*index+2 respectively
	Post:		value is removed from the heap
	Returns:	true if the item was removed, false otherwise
	index <- Array.IndexOf(value)
	if index < 0
		return false
	else
		heap[index] <- heap[--count] // place last item in heap in hole
		while 2 * index + 1 < count and (heap[index] > heap[left] or heap[index] > index[right])
			// promote smallest key from subtree
			if heap[left] < heap[right]
				swap(left, index)
				index <- left
			else
				swap(right, index)
				index <- right
			end if
		end while
		return true
	end if
end Remove